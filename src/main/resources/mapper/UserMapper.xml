<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.unicon.user.dao.UserDAO">

    <!-- 결과 매핑 -->
    <resultMap id="UserVoMap" type="com.example.unicon.user.vo.UserVo">
        <id property="userId" column="user_id"/>
        <result property="tenantId" column="tenant_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="role" column="role"/>
        <result property="isActive" column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 테넌트별 사용자 목록 조회 -->
    <select id="selectUsersByTenant" parameterType="com.example.unicon.user.vo.UserVo" resultMap="UserVoMap">
        SELECT
        user_id,
        tenant_id,
        name,
        email,
        password,
        role,
        is_active,
        created_at,
        updated_at
        FROM users
        WHERE tenant_id = #{tenantId}
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (name LIKE CONCAT('%', #{searchKeyword}, '%')
            OR email LIKE CONCAT('%', #{searchKeyword}, '%'))
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 이메일과 테넌트로 사용자 조회 -->
    <select id="selectUsersByEmailAndTenant" parameterType="com.example.unicon.user.vo.UserVo" resultMap="UserVoMap">
        SELECT
        user_id,
        tenant_id,
        name,
        email,
        role,
        is_active,
        created_at,
        updated_at
        FROM users
        WHERE email = #{email}
        AND tenant_id = #{tenantId}
    </select>

    <!-- 사용자 상세 조회 -->
    <select id="selectUser" parameterType="com.example.unicon.user.vo.UserVo" resultMap="UserVoMap">
        SELECT
        user_id,
        tenant_id,
        name,
        email,
        password,
        role,
        is_active,
        created_at,
        updated_at
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="com.example.unicon.user.vo.UserVo">
        INSERT INTO users (
        tenant_id,
        name,
        email,
        password,
        role,
        is_active,
        created_at
        ) VALUES (
        #{tenantId},
        #{name},
        #{email},
        #{password},
        #{role},
        #{isActive},
        NOW()
        )
    </insert>

    <!-- 사용자 수정 -->
    <update id="updateUser" parameterType="com.example.unicon.user.vo.UserVo">
        UPDATE users SET
        name = #{name},
        email = #{email},
        <if test="password != null and password != ''">
            password = #{password},
        </if>
        role = #{role},
        is_active = #{isActive},
        updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUser" parameterType="com.example.unicon.user.vo.UserVo">
        DELETE FROM users
        WHERE user_id = #{userId}
    </delete>

    <!-- 이메일로 사용자 조회 -->
    <select id="getUserByEmail" parameterType="String" resultMap="UserVoMap">
        SELECT
        user_id,
        tenant_id,
        name,
        email,
        password,
        role,
        is_active,
        created_at,
        updated_at
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 로그인용 사용자 조회 -->
    <select id="loginUser" parameterType="com.example.unicon.user.vo.UserVo" resultMap="UserVoMap">
        SELECT
        user_id,
        tenant_id,
        name,
        email,
        password,
        role,
        is_active,
        created_at,
        updated_at
        FROM users
        WHERE email = #{email}
        AND is_active = true
    </select>

</mapper>